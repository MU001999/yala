%{
#include <vector>
#include <string>
#include <utility>

enum TOKEN
{
    TEND = 1,    // #

    TAT,         // @
    TATAT,       // @@

    TUSING,      // using
    TIF,         // if
    TELIF,       // elif
    TELSE,       // else
    TWHILE,      // while
    TDO,         // do
    TFOR,        // for
    TTO,         // to
    TFOREACH,    // foreach
    TAS,         // as
    TBREAK,      // break
    TCONTINUE,   // continue
    TRETURN,     // return
    TMATCH,      // match

    TNEW,        // new

    TNONE,       // none
    TTRUE,       // true
    TFALSE,      // false

    TIDENTIFIER, // [a-zA-Z_][a-zA-Z0-9_]*
    TINTEGER,    // [0-9]+
    TDOUBLE,     // [0-9]+\.[0-9]*
    TSTRING,     // "[^"\n]"

    TASSIGN,     // :
    TCOMMA,      // ,
    TDOT,        // .

    TLPAREN,     // (
    TRPAREN,     // )
    TLBRACKET,   // [
    TRBRACKET,   // ]
    TLBRACE,     // {
    TRBRACE,     // }

    TADD,        // +
    TSUB,        // -
    TMUL,        // *
    TDIV,        // /
    TMOD,        // %

    TBAND,       // &
    TBOR,        // |
    TBXOR,       // ^
    TBNEG,       // ~
    TBLS,        // <<
    TBRS,        // >>

    TAND,        // and
    TOR,         // or
    TNOT,        // not !

    TCEQ,        // =
    TCNE,        // !=
    TCLT,        // <
    TCLE,        // <=
    TCGT,        // >
    TCGE,        // >=

    TRET         // =>
};

struct Token
{
    TOKEN token_id;
    std::string value;

    Token(TOKEN token_id, std::string value = "")
      : token_id(token_id), value(std::move(value)) {}
};

std::vector<Token> tokens;

inline void push(TOKEN token)
{
    tokens.emplace_back(token);
}

inline void push(TOKEN token, std::string text)
{
    tokens.emplace_back(token, text);
}
%}

ws          \s+
digit       [0-9]
string      "[^"\n]"
double      {digit}+\.{digit}*
integer     {digit}+
identifier  [a-zA-Z_][a-zA-Z0-9_]*

%%

{ws}            { return 1; }
{string}        { push(TSTRING, yytext); return 1; }
{double}        { push(TDOUBLE, yytext); return 1; }
{integer}       { push(TINTEGER, yytext); return 1; }
{identifier}    { push(TIDENTIFIER, yytext); return 1; }

using           { push(TUSING); return 1; }
if              { push(TIF); return 1; }
elif            { push(TELIF); return 1; }
else            { push(TELSE); return 1; }
while           { push(TWHILE); return 1; }
do              { push(TDO); return 1; }
for             { push(TFOR); return 1; }
to              { push(TTO); return 1; }
foreach         { push(TFOREACH); return 1; }
as              { push(TAS); return 1; }
break           { push(TBREAK); return 1; }
continue        { push(TCONTINUE); return 1; }
return          { push(TRETURN); return 1; }
match           { push(TMATCH); return 1; }
new             { push(TNEW); return 1; }
none            { push(TNONE); return 1; }
true            { push(TTRUE); return 1; }
false           { push(TFALSE); return 1; }
and             { push(TAND); return 1; }
or              { push(TOR); return 1; }
not             { push(TNOT); return 1; }

"#"             { push(TEND); return 1; }
"@"             { push(TAT); return 1; }
"@@"            { push(TATAT); return 1; }
":"             { push(TASSIGN); return 1; }
";"             { push(TCOMMA); return 1; }
"."             { push(TDOT); return 1; }
"("             { push(TLPAREN); return 1; }
")"             { push(TRPAREN); return 1; }
"["             { push(TLBRACKET); return 1; }
"]"             { push(TRBRACKET); return 1; }
"{"             { push(TLBRACE); return 1; }
"}"             { push(TRBRACE); return 1; }
"+"             { push(TADD); return 1; }
"-"             { push(TSUB); return 1; }
"*"             { push(TMUL); return 1; }
"/"             { push(TDIV); return 1; }
"%"             { push(TMOD); return 1; }
"&"             { push(TBAND); return 1; }
"|"             { push(TBOR); return 1; }
"^"             { push(TBXOR); return 1; }
"~"             { push(TBNEG); return 1; }
"<<"            { push(TBLS); return 1; }
">>"            { push(TBRS); return 1; }
"!"             { push(TNOT); return 1; }
"="             { push(TCEQ); return 1; }
"!="            { push(TCNE); return 1; }
"<"             { push(TCLT); return 1; }
"<="            { push(TCLE); return 1; }
">"             { push(TCGT); return 1; }
">="            { push(TCGE); return 1; }
"=>"            { push(TRET); return 1; }

.               { return 1; }

%%
int main(int argc, char *argv[])
{
    while (int res = yylex());

    for (auto &token : tokens)
    {
        std::cout << token.token_id << " " << token.value << std::endl;
    }

    return 0;
}